[{"path":"https://edibble.emitanaka.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://edibble.emitanaka.org/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://edibble.emitanaka.org/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://edibble.emitanaka.org/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://edibble.emitanaka.org/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://edibble.emitanaka.org/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://edibble.emitanaka.org/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://edibble.emitanaka.org/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://edibble.emitanaka.org/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://edibble.emitanaka.org/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://edibble.emitanaka.org/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://edibble.emitanaka.org/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://edibble.emitanaka.org/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://edibble.emitanaka.org/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://edibble.emitanaka.org/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://edibble.emitanaka.org/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://edibble.emitanaka.org/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://edibble.emitanaka.org/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://edibble.emitanaka.org/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://edibble.emitanaka.org/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2019 Emi Tanaka  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. edibble Copyright (C) 2019 Emi Tanaka This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://edibble.emitanaka.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Emi Tanaka. Author, maintainer.","code":""},{"path":"https://edibble.emitanaka.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tanaka E (2022). edibble: Generate experimental designs using grammar experimental design. https://edibble.emitanaka.org/, https://github.com/emitanaka/edibble.","code":"@Manual{,   title = {edibble: Generate experimental designs using the grammar of experimental design},   author = {Emi Tanaka},   year = {2022},   note = {https://edibble.emitanaka.org/, https://github.com/emitanaka/edibble}, }"},{"path":[]},{"path":"https://edibble.emitanaka.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"edibble - an R package to facilitate construction of experimental designs","text":"Install development version : simulate_rcrds(), also need install simulate package currently available GitHub:","code":"# install.packages(\"remotes\") remotes::install_github(\"emitanaka/edibble\") remotes::install_github(\"emitanaka/simulate\")"},{"path":"https://edibble.emitanaka.org/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"edibble - an R package to facilitate construction of experimental designs","text":"goal edibble R-package aid plan, design simulation experiments mapping fundamental components experiments object oriented system. edibble system built principle system must make easy recover experimental context encouraging user explicit experimental details fundamental terms.","code":""},{"path":"https://edibble.emitanaka.org/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"edibble - an R package to facilitate construction of experimental designs","text":"Consider experiment want know effective way teaching (flipped traditional style) teaching particular subject different forms exams (take-home, open-book closed-book) affect student’s marks. four classes subject class holding 30 students. teaching style can applied whole class exam can different individual students. constructing experiment, might want think recording level unit values variables can recorded . export edibble design using export_design function, variables recording constraint values expect, e.g. factors, cells drop-menu select possible values.  addition, spreadsheet every observational level. E.g. room teacher students one class rather entering duplicate information, exported another sheet data entry.  also support complex nesting structures. can always make structure using edibble take resulting data frame use experimental design software. ’s also possible bring existing data frame edibble want take advantage exporting feature edibble.","code":"library(edibble)  set.seed(2020)  des <- start_design(name = \"Effective teaching\") %>%     set_units(class = 4,               student = nested_in(class, 30)) %>%     set_trts(style = c(\"flipped\", \"traditional\"),              exam = c(\"take-home\", \"open-book\", \"closed-book\")) %>%     allot_trts(style ~ class,                exam ~ student) %>%     assign_trts(\"random\")  serve_table(des) #> # Effective teaching  #> # An edibble: 120 x 4 #>        class     student       style        exam #>    <unit(4)> <unit(120)>    <trt(2)>    <trt(3)> #>  1    class1   student1  traditional take-home   #>  2    class1   student2  traditional closed-book #>  3    class1   student3  traditional open-book   #>  4    class1   student4  traditional take-home   #>  5    class1   student5  traditional closed-book #>  6    class1   student6  traditional take-home   #>  7    class1   student7  traditional take-home   #>  8    class1   student8  traditional open-book   #>  9    class1   student9  traditional take-home   #> 10    class1   student10 traditional closed-book #> # … with 110 more rows out <- des %>%      set_rcrds_of(student = c(\"exam_mark\",                              \"quiz1_mark\",                              \"quiz2_mark\",                              \"gender\"),               class = c(\"room\",                         \"teacher\")) %>%     expect_rcrds(exam_mark <= 100,                  exam_mark >= 0,                  quiz1_mark <= 15L,                  quiz1_mark >= 0L,                  quiz2_mark <= 30L,                  quiz2_mark >= 0L,                  factor(gender, levels = c(\"female\", \"male\", \"non-binary\", \"unknown\"))) %>%     serve_table()  out #> # Effective teaching  #> # An edibble: 120 x 10 #>        class     student       style        exam exam_mark quiz1_mark quiz2_mark #>    <unit(4)> <unit(120)>    <trt(2)>    <trt(3)>    <rcrd>     <rcrd>     <rcrd> #>  1    class1   student1  traditional take-home           ■          ■          ■ #>  2    class1   student2  traditional closed-book         ■          ■          ■ #>  3    class1   student3  traditional open-book           ■          ■          ■ #>  4    class1   student4  traditional take-home           ■          ■          ■ #>  5    class1   student5  traditional closed-book         ■          ■          ■ #>  6    class1   student6  traditional take-home           ■          ■          ■ #>  7    class1   student7  traditional take-home           ■          ■          ■ #>  8    class1   student8  traditional open-book           ■          ■          ■ #>  9    class1   student9  traditional take-home           ■          ■          ■ #> 10    class1   student10 traditional closed-book         ■          ■          ■ #> # … with 110 more rows, and 3 more variables: gender <rcrd>, room <rcrd>, #> #   teacher <rcrd> export_design(out, file = \"/PATH/TO/FILE.xlsx\") start_design(\"nesting structure\") %>%    # there are 3 sites labelled A, B, C   set_units(site = c(\"A\", \"B\", \"C\"),             # each site has 2 blocks except B with 3 sites             block = nested_in(site,                                \"B\" ~ 3,                                 . ~ 2),             # levels can be specified by their number instead             # so for below \"block1\" has 30 plots,              # \"block2\" and \"block3\" has 40 plots,             # the rest of blocks have 20 plots.             plot = nested_in(block,                                1 ~ 30,                         c(2, 3) ~ 40,                               . ~ 20)) %>%    serve_table() #> # nesting structure  #> # An edibble: 170 x 3 #>         site     block        plot #>    <unit(3)> <unit(7)> <unit(170)> #>  1         A    block1      plot1  #>  2         A    block1      plot2  #>  3         A    block1      plot3  #>  4         A    block1      plot4  #>  5         A    block1      plot5  #>  6         A    block1      plot6  #>  7         A    block1      plot7  #>  8         A    block1      plot8  #>  9         A    block1      plot9  #> 10         A    block1      plot10 #> # … with 160 more rows"},{"path":"https://edibble.emitanaka.org/index.html","id":"experimental-data","dir":"","previous_headings":"","what":"Experimental data","title":"edibble - an R package to facilitate construction of experimental designs","text":"tidyverse well suited data science project workflow illustrated (B) (Grolemund Wickham 2017). experimental data, statistical aspect begins obtaining data depicted (). focus edibble facilitate work ().  edibble R-package differ considerably packages constructing experimental design focus whole process less randomisation process (software generally focus well ). features include: declaratively create experimental designs based experimental components (e.g. units treatments), explicitly specify variables recorded (e.g. response), set expected values variables recorded restrict data entry design exported xlsx file, print outputs intermediate constructs experimental design configurations graphical elements (see vignette(\"output\")), make classical named designs (see vignette(\"named-designs\")), add context also serves notes experiment (see vignette(\"edibble\")).","code":""},{"path":"https://edibble.emitanaka.org/index.html","id":"limitations","dir":"","previous_headings":"","what":"Limitations","title":"edibble - an R package to facilitate construction of experimental designs","text":"Currently, edibble: expects know number units available start. Unknown numbers supported future versions. necessarily create efficient design. E.g. balanced incomplete block designs special property adhoc solution may required make sure can generate design special property. just nature generalised tools edibble doesn’t aim best everything, hopes others developers can build edibble framework create specialist design. theory, edibble support experiments comparative experiments tested. enough testing design diagnosed construction (done regardless much testing edibble implements).","code":""},{"path":"https://edibble.emitanaka.org/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related Work","title":"edibble - an R package to facilitate construction of experimental designs","text":"way edibble specifies experimental design largely novel (say ) work resembles . ’m concurrently working two extension packages: deggust - visualise designs constructed edibble ggplot2 objects (WIP). sizzled - experiments require sample size calculation (WIP). related work. can also look CRAN Task View Design Experiment Analysis Experimental Data whole collection. DeclareDesign survey sampling designs designr balanced factorial designs crossed nested random fixed effect data frame dae functions useful design ANOVA experiments (fact powering randomisation edibble) plotdesignr designing agronomic field experiments","code":""},{"path":"https://edibble.emitanaka.org/index.html","id":"acknowledgement","dir":"","previous_headings":"","what":"Acknowledgement","title":"edibble - an R package to facilitate construction of experimental designs","text":"edibble hugely inspired work Tidyverse Team. ’m grateful dedication work Tidyverse Team, well R Development Core Team supports core R ecosystem, made developing package possible.","code":""},{"path":"https://edibble.emitanaka.org/index.html","id":"tidyverse-familiarity","dir":"","previous_headings":"","what":"Tidyverse familiarity","title":"edibble - an R package to facilitate construction of experimental designs","text":"implementation edibble adopt similar nomenclature design philosophy tidyverse (, ’s likely shortcoming) tidyverse users can leverage familiarity tidyverse language using edibble. Specifically, edibble follows philosophy: main functions one thing consistent form <verb>_<noun> (e.g. set_units set_rcrds) nouns generally plural. Exceptions subject matter clearly singular (e.g. start_design set_context); pipable functions; dots arguments dynamic dots; duplicate names repaired option tibble additions edibble graph; ability developers extend certain components. Currently supported others contribute classical named experimental designs via prep_classical_; specification complex nested structure drawing similarity dplyr::case_when (LHS character integer edibble however).","code":""},{"path":"https://edibble.emitanaka.org/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"edibble - an R package to facilitate construction of experimental designs","text":"Please note edibble project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://edibble.emitanaka.org/reference/add_edibble_vertex.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an edibble vertex — add_edibble_vertex","title":"Add an edibble vertex — add_edibble_vertex","text":"edibble, short hand used assign new edibble variables/nodes. function converts short hand make minimal edibble node returns edibble graph additional node.","code":""},{"path":"https://edibble.emitanaka.org/reference/add_edibble_vertex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an edibble vertex — add_edibble_vertex","text":"","code":"add_edibble_vertex(x, ...)  # S3 method for default add_edibble_vertex(value, fname, class, design)"},{"path":"https://edibble.emitanaka.org/reference/add_edibble_vertex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an edibble vertex — add_edibble_vertex","text":"value value may single number, unnamed vector, one sided formula linkabble. design edibble graph levels converted list used evaluation expressions. name Name edibble variable string.","code":""},{"path":"https://edibble.emitanaka.org/reference/add_edibble_vertex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an edibble vertex — add_edibble_vertex","text":"Returns evaluated expression.","code":""},{"path":"https://edibble.emitanaka.org/reference/add_edibble_vertex.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Add an edibble vertex — add_edibble_vertex","text":"default: default method","code":""},{"path":"https://edibble.emitanaka.org/reference/allot_table.html","id":null,"dir":"Reference","previous_headings":"","what":"A shorthand for allot, assign and serve — allot_table","title":"A shorthand for allot, assign and serve — allot_table","text":"shorthand allot, assign serve","code":""},{"path":"https://edibble.emitanaka.org/reference/allot_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A shorthand for allot, assign and serve — allot_table","text":"","code":"allot_table(   .design,   ...,   order = \"random\",   seed = NULL,   constrain = nesting_structure(.design) )"},{"path":"https://edibble.emitanaka.org/reference/allot_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A shorthand for allot, assign and serve — allot_table","text":".design edibble design units, treatments allotment defined. ... Arguments passed allot_trts .record logical value. indicates whether record code step. default TRUE. remain TRUE unless function used wrapper code. order character vector signifying apportion treatments units. value either \"random\", \"systematic\" \"systematic-random\". \"random\" allocates treatment randomly units based specified allotment restrictions implied unit structure. \"systematic\" allocates treatment systematic order units. \"systematic-random\" allocates treatment systematic order units possible divide treatments equally (number units divisible number levels treatment factor), extras chosen randomly. seed scalar value used set seed result reproducible. constrain nesting structure units.","code":""},{"path":"https://edibble.emitanaka.org/reference/allot_trts.html","id":null,"dir":"Reference","previous_headings":"","what":"Define the possible allocation of treatments to units — allot_trts","title":"Define the possible allocation of treatments to units — allot_trts","text":"function adds edges variable nodes specify mapping units treatment. function actually assign specific treatment levels onto actual units.","code":""},{"path":"https://edibble.emitanaka.org/reference/allot_trts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define the possible allocation of treatments to units — allot_trts","text":"","code":"allot_trts(.design, ..., .record = TRUE)"},{"path":"https://edibble.emitanaka.org/reference/allot_trts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define the possible allocation of treatments to units — allot_trts","text":"... One-sided two-sided formula. input one-sided formula whole treatment applied specified unit. .record logical value. indicates whether record code step. default TRUE. remain TRUE unless function used wrapper code.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/allot_trts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define the possible allocation of treatments to units — allot_trts","text":"","code":"start_design() %>%   set_units(block = 10,             plot = nested_in(block, 3)) %>%   set_trts(treat = c(\"A\", \"B\", \"C\"),            pest = c(\"a\", \"b\")) %>%   allot_trts(treat ~ plot,                 pest ~ block) #> An edibble design #> ├─block (10 levels) #> │ └─plot (30 levels) #> ├─treat (3 levels) #> └─pest (2 levels) #> Allotment: #>  #> • treat ~ plot #> • pest ~ block"},{"path":"https://edibble.emitanaka.org/reference/anatomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Anatomy of the design — anatomy","title":"Anatomy of the design — anatomy","text":"convenient wrapper dae::designAnatomy formulae structure automatically determined unit treatment structure specified edibble system. Note: computation may long design quite complicated many units.","code":""},{"path":"https://edibble.emitanaka.org/reference/anatomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anatomy of the design — anatomy","text":"","code":"anatomy(.design, ...)"},{"path":"https://edibble.emitanaka.org/reference/anatomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Anatomy of the design — anatomy","text":".design complete edibble design object edibble table. ... arguments parsed dae::designAnatomy.","code":""},{"path":"https://edibble.emitanaka.org/reference/assign_trts.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign treatments to units — assign_trts","title":"Assign treatments to units — assign_trts","text":"function assigns specific treatment levels actual units.","code":""},{"path":"https://edibble.emitanaka.org/reference/assign_trts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign treatments to units — assign_trts","text":"","code":"assign_trts(   .design,   order = \"random\",   seed = NULL,   constrain = nesting_structure(.design),   ...,   .record = TRUE )"},{"path":"https://edibble.emitanaka.org/reference/assign_trts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign treatments to units — assign_trts","text":".design edibble design units, treatments allotment defined. order character vector signifying apportion treatments units. value either \"random\", \"systematic\" \"systematic-random\". \"random\" allocates treatment randomly units based specified allotment restrictions implied unit structure. \"systematic\" allocates treatment systematic order units. \"systematic-random\" allocates treatment systematic order units possible divide treatments equally (number units divisible number levels treatment factor), extras chosen randomly. seed scalar value used set seed result reproducible. constrain nesting structure units. ... Arguments parsed order_trts functions. .record Whether record step.","code":""},{"path":"https://edibble.emitanaka.org/reference/crossed_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify the units to cross to index a new unit — crossed_by","title":"Specify the units to cross to index a new unit — crossed_by","text":"crossed_by(, B) ~:B crossed_by offers control names new units well adding new attributes.","code":""},{"path":"https://edibble.emitanaka.org/reference/crossed_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify the units to cross to index a new unit — crossed_by","text":"","code":"crossed_by(   ...,   prefix = NULL,   suffix = NULL,   leading0 = NULL,   sep = NULL,   attrs = NULL )"},{"path":"https://edibble.emitanaka.org/reference/crossed_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify the units to cross to index a new unit — crossed_by","text":"... sequence units prefix Currently implemented.prefix label. suffix Currently implemented.suffix label. leading0 Currently implemented.Whether leading 0 labels made. sep Currently implemented.separator added prefix number prefix empty. attrs Currently implemented.","code":""},{"path":"https://edibble.emitanaka.org/reference/design-context.html","id":null,"dir":"Reference","previous_headings":"","what":"Describe context related to experiment — design-context","title":"Describe context related to experiment — design-context","text":"set_context stores simple context experiment. context printed return object printed well exported title sheet (see export_design()). context already exists overwritten. can use sort_context reorder named context alphabetically. want see context printed time, use suppress_context muffle context express_context turn context print . Use switch_context turn print context switched , turn print switched .","code":""},{"path":"https://edibble.emitanaka.org/reference/design-context.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describe context related to experiment — design-context","text":"","code":"set_context(.edibble, ..., .record = TRUE)"},{"path":"https://edibble.emitanaka.org/reference/design-context.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describe context related to experiment — design-context","text":".edibble edibble design (edbl_design), edibble data frame (edbl_table) object contains edibble data frame attribute design. ... Strings contexts notes experiment. context maybe named. context wrong, consider writing context external file write reference file context instead. Input strings support inline markup use glue braces well cli markup formatter. formatting evaluated stored edbl_design. .record logical value. indicates whether record code step. default TRUE. remain TRUE unless function used wrapper code.","code":""},{"path":"https://edibble.emitanaka.org/reference/design-context.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Describe context related to experiment — design-context","text":"original except edbl_design updated context.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/design-context.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Describe context related to experiment — design-context","text":"","code":"files <- c(\"details.txt\", \"about.docx\") start_design(\"COVID-19\") %>%   set_context(question = \"Does {.field Pfizer vaccine} work?\",               where = \"Tested in {.emph lab}\",               contact = \"{.strong Jane Doe} ({.email jane.doe@fakeaddress.com}) for domain knowledge\",               \"Context do not have to be named\",               \"The function {.fn designRandomise} from {.pkg dae} randomises allocation of treatments\",               \"Other detailed information in {.file {files}}\",               \"Check more details at {.url https://covid-19-au.com/}\") #> Does Pfizer vaccine work? #> Tested in lab #> Jane Doe (jane.doe@fakeaddress.com) for domain knowledge #> Context do not have to be named #> The function `designRandomise()` from dae randomises allocation of treatments #> Error in eval(expr, envir = list(`?` = function(...) stop()), enclos = envir): object 'files' not found"},{"path":"https://edibble.emitanaka.org/reference/design-helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Test and get edibble objects — design-helpers","title":"Test and get edibble objects — design-helpers","text":"functions tests object (object attribute) inherits particular class returns TRUE , otherwise FALSE. is_edibble_design checks inherits edbl_design. is_edibble_graph checks inherits edbl_graph. is_edibble_table checks inherits edbl_table is_edibble checks object inherits edbl. search quite simple, checks object edbl_design, failing looks see attribute \"design\" object edbl_design. is_named_design check inherits NamedDesign. get functions extracts requested edibble component (table, graph, design) object possible. edbl_design tries get edbl_design. edbl_table tries get edbl_table design attribute. edbl_graph tries get edbl_graph.","code":""},{"path":"https://edibble.emitanaka.org/reference/design-helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test and get edibble objects — design-helpers","text":"","code":"is_edibble_design(x)  is_named_design(x)  is_edibble_table(x)  is_edibble_graph(x)  is_edibble(x)  edbl_design(x)  edbl_table(x)"},{"path":"https://edibble.emitanaka.org/reference/design-helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test and get edibble objects — design-helpers","text":"x object.","code":""},{"path":"https://edibble.emitanaka.org/reference/design_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the node or edge data from an edibble design — design_data","title":"Get the node or edge data from an edibble design — design_data","text":"Get node edge data edibble design","code":""},{"path":"https://edibble.emitanaka.org/reference/design_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the node or edge data from an edibble design — design_data","text":"","code":"fct_nodes(design)  fct_edges(design)  lvl_nodes(design)  lvl_edges(design)  fct_nodes_pull(design, var = -1, name = NULL, ...)  fct_edges_pull(design, var = -1, name = NULL, ...)  lvl_nodes_pull(design, var = -1, name = NULL, ...)  lvl_edges_pull(design, var = -1, name = NULL, ...)  fct_nodes_filter(design, ...)  lvl_nodes_filter(design, ...)  fct_edges_filter(design, ...)  lvl_edges_filter(design, ...)  fct_n(design)  lvl_n(design)  fct_class(design, id = NULL)  lvl_class(design, id = NULL)"},{"path":"https://edibble.emitanaka.org/reference/design_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the node or edge data from an edibble design — design_data","text":"design edibble design.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/edibble-package.html","id":null,"dir":"Reference","previous_headings":"","what":"edibble: Generate experimental designs using the grammar of experimental design — edibble-package","title":"edibble: Generate experimental designs using the grammar of experimental design — edibble-package","text":"system facilitate statistical thinking adapting experimental designs different conditions.","code":""},{"path":"https://edibble.emitanaka.org/reference/edibble-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"edibble: Generate experimental designs using the grammar of experimental design — edibble-package","text":"(WIP)","code":""},{"path":"https://edibble.emitanaka.org/reference/edibble-package.html","id":"website","dir":"Reference","previous_headings":"","what":"Website","title":"edibble: Generate experimental designs using the grammar of experimental design — edibble-package","text":"website package https://edibble.emitanaka.org Discussion https://github.com/emitanaka/edibble/discussions","code":""},{"path":"https://edibble.emitanaka.org/reference/edibble-package.html","id":"package-options","dir":"Reference","previous_headings":"","what":"Package options","title":"edibble: Generate experimental designs using the grammar of experimental design — edibble-package","text":"following options used changing default view print edibble design edibble graph. edibble.tree.decorate.trts edibble.tree.decorate.units edibble.tree.decorate.rcrd edibble.tree.decorate.levels edibble.tree.decorate.main TODO","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/edibble-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"edibble: Generate experimental designs using the grammar of experimental design — edibble-package","text":"Maintainer: Emi Tanaka dr.emi.tanaka@gmail.com (ORCID)","code":""},{"path":"https://edibble.emitanaka.org/reference/examine_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the recipe code — examine_recipe","title":"Check the recipe code — examine_recipe","text":"Check recipe code","code":""},{"path":"https://edibble.emitanaka.org/reference/examine_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the recipe code — examine_recipe","text":"","code":"examine_recipe(x, ...)"},{"path":"https://edibble.emitanaka.org/reference/examine_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the recipe code — examine_recipe","text":"x edibble design, edibble, takeout object. ... used.","code":""},{"path":"https://edibble.emitanaka.org/reference/expect-vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Expected type of data entry — expect-vars","title":"Expected type of data entry — expect-vars","text":"functions used within expect_vars variables recorded constraint expected values exported xlsx file export_design(). functions set particular value type (numeric, integer, date, time character) preceded \"to_be_\" corresponding restriction set with_value().","code":""},{"path":"https://edibble.emitanaka.org/reference/expect-vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expected type of data entry — expect-vars","text":"","code":"to_be_numeric(range)  to_be_integer(range)  to_be_date(range)  to_be_time(range)  to_be_character(length)  to_be_factor(levels)"},{"path":"https://edibble.emitanaka.org/reference/expect-vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expected type of data entry — expect-vars","text":"range, length named list two elements: \"operator\" \"value\" provided helper with_value() gives possible range values expected type can take. value vector possible values entry.","code":""},{"path":"https://edibble.emitanaka.org/reference/expect_rcrds.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the expected values for recording variables — expect_rcrds","title":"Set the expected values for recording variables — expect_rcrds","text":"Set expected values recording variables","code":""},{"path":"https://edibble.emitanaka.org/reference/expect_rcrds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the expected values for recording variables — expect_rcrds","text":"","code":"expect_rcrds(.edibble, ...)"},{"path":"https://edibble.emitanaka.org/reference/expect_rcrds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the expected values for recording variables — expect_rcrds","text":".edibble edibble design (edbl_design), edibble data frame (edbl_table) object contains edibble data frame attribute design. ... Name-value pairs name belonging variable plan recorded set_rcrds() values expected types values set helper functions, see ?expect-rcrds.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/export_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Export the design to xlsx — export_design","title":"Export the design to xlsx — export_design","text":"function designed export design made using edibble external xlsx file.","code":""},{"path":"https://edibble.emitanaka.org/reference/export_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export the design to xlsx — export_design","text":"","code":"export_design(.data, file, author, date = Sys.Date(), overwrite = FALSE)"},{"path":"https://edibble.emitanaka.org/reference/export_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export the design to xlsx — export_design","text":".data edibble data frame design. file File, including path, export data . author Name author character. vector character supported multiple authors. date date inserted header. overwrite logical indicating whether overwrite exisitng file .","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/fct_attrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Setting the traits of factors — fct_attrs","title":"Setting the traits of factors — fct_attrs","text":"function used set characteristics factors.","code":""},{"path":"https://edibble.emitanaka.org/reference/fct_attrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setting the traits of factors — fct_attrs","text":"","code":"fct_attrs(   levels = NULL,   label = NULL,   description = NULL,   unit_of_measure = NULL,   class = NULL,   ... )"},{"path":"https://edibble.emitanaka.org/reference/fct_attrs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setting the traits of factors — fct_attrs","text":"levels edbl_levels object contain information levels factor. label string denotes long name factor. description text description factor. unit_of_measure string denoting unit measurement applicable. class optional subclass. ... name-value pair attributes. value must scalar attributed whole factor (individual levels). values added attributes output object.","code":""},{"path":"https://edibble.emitanaka.org/reference/fct_attrs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setting the traits of factors — fct_attrs","text":"edbl_levels object.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/lady_tasting_tea.html","id":null,"dir":"Reference","previous_headings":"","what":"Lady tasting tea — lady_tasting_tea","title":"Lady tasting tea — lady_tasting_tea","text":"Lady tasting tea experiment described Fisher (1935) test ability lady said tell whether tea milk added first cup tea. experiment consisted preparing eight cups tea, four milk poured first four tea poured first. lady told advance four kind preparation. data consists experimental structure result order presented practice unknown. cup cup number. first cup tea prepared milk tea first. guess guess lady one poured first. correct Whether lady's guess correct.","code":""},{"path":"https://edibble.emitanaka.org/reference/lady_tasting_tea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lady tasting tea — lady_tasting_tea","text":"","code":"lady_tasting_tea"},{"path":"https://edibble.emitanaka.org/reference/lady_tasting_tea.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Lady tasting tea — lady_tasting_tea","text":"object class tbl_df (inherits tbl, data.frame) 8 rows 4 columns.","code":""},{"path":"https://edibble.emitanaka.org/reference/lady_tasting_tea.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Lady tasting tea — lady_tasting_tea","text":"Fisher, Ronald (1935) Design Experiments.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/latin.html","id":null,"dir":"Reference","previous_headings":"","what":"Latin square designs and its generalisations as an array — latin","title":"Latin square designs and its generalisations as an array — latin","text":"Latin square designs generalisations array","code":""},{"path":"https://edibble.emitanaka.org/reference/latin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Latin square designs and its generalisations as an array — latin","text":"","code":"latin_square(n, randomise = TRUE)  latin_rectangle(nr, nc, nt, randomise = TRUE)  latin_array(dim, nt, randomise = TRUE)"},{"path":"https://edibble.emitanaka.org/reference/latin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Latin square designs and its generalisations as an array — latin","text":"n, nt number treatments randomise logical value indicate whether treatment allocation randomised. default value TRUE. nr number rows nc number columns dim vector integers indicate number elements dimension.","code":""},{"path":"https://edibble.emitanaka.org/reference/latin.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Latin square designs and its generalisations as an array — latin","text":"latin_square: Latin square design latin_rectangle: Like Latin square design allow different number rows columns latin_array: Returns array stitches multiple Latin square/rectangle design","code":""},{"path":"https://edibble.emitanaka.org/reference/lvl_attrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Setting the traits of the levels — lvl_attrs","title":"Setting the traits of the levels — lvl_attrs","text":"Use function create \"vector\" levels. vector actually comprised data frame column labels columns corresponding level attribute (). data frame can accessed lvl_data().","code":""},{"path":"https://edibble.emitanaka.org/reference/lvl_attrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setting the traits of the levels — lvl_attrs","text":"","code":"lvl_attrs(   levels = NULL,   labels = NULL,   prefix = \"\",   suffix = \"\",   sep = edibble_labels_opt(\"sep\"),   include_leading_zero = edibble_labels_opt(\"leading_zero\"),   data = NULL,   ... )"},{"path":"https://edibble.emitanaka.org/reference/lvl_attrs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setting the traits of the levels — lvl_attrs","text":"levels vector either denotes index number short name levels. labels optional character vector long name format levels. prefix prefix labels. suffix suffix labels. sep string add prefix levels. include_leading_zero logical value indicate whether leading zero added level indexes. ignored levels numeric. data list data frame size levels. ... Name-value pair denoting level attributes. value length levels single value.","code":""},{"path":"https://edibble.emitanaka.org/reference/make_classical.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a classical named experimental design — make_classical","title":"Create a classical named experimental design — make_classical","text":"function defunct. Please use takeout instead. function make_classical generates classical named experimental design supplying short name prints , default: info: information named experimental design, code: code create design using edibble, table: edibble data frame generated design. can find available short names find_classical_names().","code":""},{"path":"https://edibble.emitanaka.org/reference/make_classical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a classical named experimental design — make_classical","text":"","code":"make_classical(.name = \"\", ..., .output = TRUE)  code_classical(.name = \"\", ..., .quiet = FALSE)"},{"path":"https://edibble.emitanaka.org/reference/make_classical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a classical named experimental design — make_classical","text":".name short name classical named experimental design. See Details available named designs. ... Parameters passed prep_classical_* functions. .output logical value indicate whether output printed vector character (e.g. c(\"info\", \"code\", \"table\")) specifying three outputs printed. Default TRUE.","code":""},{"path":"https://edibble.emitanaka.org/reference/make_classical.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a classical named experimental design — make_classical","text":"available named designs : \"crd\": completely randomised design \"rcbd\": randomised complete block design \"split\": split plot design","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/make_classical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a classical named experimental design — make_classical","text":"","code":"make_classical(\"crd\", n = 50, t = 5) #> Warning: `prep_classical_crd` is deprecated. Please use `menu_crd` instead. #>  #> ── experimental design details ── #>  #>   • This experimental design is often called Completely Randomised Design. #>   • You can change the number in `seed` to get another random instance of the #>   same design. #>  #> ── edibble code ── #>  #> start_design(\"Completely Randomised Design\") %>% #>   set_units(unit = 50) %>% #>   set_trts(trt = 5) %>% #>   allot_trts(trt ~ unit) %>% #>   assign_trts(\"random\", seed = 302) %>% #>   serve_table()  #> ── edibble data frame ── #>  #> # Completely Randomised Design  #> # An edibble: 50 x 2 #>          unit      trt #>    <unit(50)> <trt(5)> #>  1     unit1      trt5 #>  2     unit2      trt5 #>  3     unit3      trt4 #>  4     unit4      trt3 #>  5     unit5      trt2 #>  6     unit6      trt1 #>  7     unit7      trt1 #>  8     unit8      trt1 #>  9     unit9      trt2 #> 10     unit10     trt1 #> # … with 40 more rows # if you omit the design parameters then it will use the default # (which may be random) make_classical(\"rcbd\") #> Warning: `prep_classical_rcbd` is deprecated. Please use `menu_rcbd` instead. #> ── experimental design details ── #>  #>   • This experimental design is often called Randomised Complete Block Design. #>   • You can change the number in `seed` to get another random instance of the #>   same design. #>  #> ── edibble code ── #>  #> start_design(\"Randomised Complete Block Design\") %>% #>   set_units(block = 5, #>             unit = nested_in(block, 3)) %>% #>   set_trts(trt = 3) %>% #>   allot_trts(trt ~ unit) %>% #>   assign_trts(\"random\", seed = 790) %>% #>   serve_table()  #> ── edibble data frame ── #>  #> # Randomised Complete Block Design  #> # An edibble: 15 x 3 #>        block       unit      trt #>    <unit(5)> <unit(15)> <trt(3)> #>  1    block1     unit1      trt1 #>  2    block1     unit2      trt2 #>  3    block1     unit3      trt3 #>  4    block2     unit4      trt2 #>  5    block2     unit5      trt3 #>  6    block2     unit6      trt1 #>  7    block3     unit7      trt3 #>  8    block3     unit8      trt1 #>  9    block3     unit9      trt2 #> 10    block4     unit10     trt2 #> 11    block4     unit11     trt1 #> 12    block4     unit12     trt3 #> 13    block5     unit13     trt3 #> 14    block5     unit14     trt2 #> 15    block5     unit15     trt1 # if you don't give any short names then it will generate a random one make_classical() #> → No name was supplied so selecting a random named experimental design... #> Warning: This function is defunct. Use `scan_menu` instead. #> Warning: `prep_classical_crd` is deprecated. Please use `menu_crd` instead. #> Warning: `prep_classical_factorial` is deprecated. Please use `menu_factorial` instead. #> Error in match.arg(design): 'arg' must be NULL or a character vector"},{"path":"https://edibble.emitanaka.org/reference/menu_bibd.html","id":null,"dir":"Reference","previous_headings":"","what":"Balance incomplete block design — menu_bibd","title":"Balance incomplete block design — menu_bibd","text":"combinations parameter values create balanced incomplete block design.","code":""},{"path":"https://edibble.emitanaka.org/reference/menu_bibd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Balance incomplete block design — menu_bibd","text":"","code":"menu_bibd(   t = random_integer_small(min = 3),   k = random_integer_small(max = t - 1),   r = random_integer_small(),   seed = random_seed_number() )"},{"path":"https://edibble.emitanaka.org/reference/menu_bibd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Balance incomplete block design — menu_bibd","text":"t number treatments. k size block. less number treatments. r number replications treatment level. seed scalar value computational reproducibility.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/menu_crd.html","id":null,"dir":"Reference","previous_headings":"","what":"Completely randomised design — menu_crd","title":"Completely randomised design — menu_crd","text":"Completely randomised design","code":""},{"path":"https://edibble.emitanaka.org/reference/menu_crd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Completely randomised design — menu_crd","text":"","code":"menu_crd(   t = random_integer_small(),   n = random_integer_medium(min = t),   r = NULL,   seed = random_seed_number() )"},{"path":"https://edibble.emitanaka.org/reference/menu_crd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Completely randomised design — menu_crd","text":"t number treatment levels n number experimental units r (Optional) number replicates. seed scalar value computational reproducibility.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/menu_factorial.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a factorial design — menu_factorial","title":"Prepare a factorial design — menu_factorial","text":"Prepare factorial design","code":""},{"path":"https://edibble.emitanaka.org/reference/menu_factorial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a factorial design — menu_factorial","text":"","code":"menu_factorial(   trt = c(random_integer_small(), random_integer_small()),   r = random_integer_small(),   design = c(\"crd\", \"rcbd\"),   seed = random_seed_number() )"},{"path":"https://edibble.emitanaka.org/reference/menu_factorial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a factorial design — menu_factorial","text":"trt vector number levels treatment factor. r number replications treatment level. design unit structure: \"crd\" \"rcbd\". default \"crd\". seed scalar value computational reproducibility.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/menu_graeco.html","id":null,"dir":"Reference","previous_headings":"","what":"Graeco-Latin Square Design — menu_graeco","title":"Graeco-Latin Square Design — menu_graeco","text":"Graeco-Latin Square Design","code":""},{"path":"https://edibble.emitanaka.org/reference/menu_graeco.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graeco-Latin Square Design — menu_graeco","text":"","code":"menu_graeco(t = random_integer_small(), seed = random_seed_number())"},{"path":"https://edibble.emitanaka.org/reference/menu_graeco.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graeco-Latin Square Design — menu_graeco","text":"t number treatments. seed scalar value computational reproducibility.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/menu_hyper_graeco.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyper-Graeco-Latin Square Design — menu_hyper_graeco","title":"Hyper-Graeco-Latin Square Design — menu_hyper_graeco","text":"Hyper-Graeco-Latin Square Design","code":""},{"path":"https://edibble.emitanaka.org/reference/menu_hyper_graeco.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyper-Graeco-Latin Square Design — menu_hyper_graeco","text":"","code":"menu_hyper_graeco(t = random_integer_small(), seed = random_seed_number())"},{"path":"https://edibble.emitanaka.org/reference/menu_hyper_graeco.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyper-Graeco-Latin Square Design — menu_hyper_graeco","text":"t number treatments seed scalar value computational reproducibility.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/menu_lsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare classical Latin square design — menu_lsd","title":"Prepare classical Latin square design — menu_lsd","text":"Prepare classical Latin square design","code":""},{"path":"https://edibble.emitanaka.org/reference/menu_lsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare classical Latin square design — menu_lsd","text":"","code":"menu_lsd(t = random_integer_small(), seed = random_seed_number())"},{"path":"https://edibble.emitanaka.org/reference/menu_lsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare classical Latin square design — menu_lsd","text":"t number treatments seed scalar value computational reproducibility.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/menu_rcbd.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a randomised complete block design — menu_rcbd","title":"Prepare a randomised complete block design — menu_rcbd","text":"Prepare randomised complete block design","code":""},{"path":"https://edibble.emitanaka.org/reference/menu_rcbd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a randomised complete block design — menu_rcbd","text":"","code":"menu_rcbd(   t = random_integer_small(),   r = random_integer_small(),   seed = random_seed_number() )"},{"path":"https://edibble.emitanaka.org/reference/menu_rcbd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a randomised complete block design — menu_rcbd","text":"t number treatments. r number replications treatment level. seed scalar value computational reproducibility.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/menu_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Split-unit design — menu_split","title":"Split-unit design — menu_split","text":"Originally referred split-plot design first used.","code":""},{"path":"https://edibble.emitanaka.org/reference/menu_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split-unit design — menu_split","text":"","code":"menu_split(   t1 = random_integer_small(),   t2 = random_integer_small(),   r = random_integer_small(),   seed = random_seed_number() )"},{"path":"https://edibble.emitanaka.org/reference/menu_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split-unit design — menu_split","text":"t1 number treatment levels main plots. t2 number treatment levels subplots. r number replications treatment level. seed scalar value computational reproducibility.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/menu_strip.html","id":null,"dir":"Reference","previous_headings":"","what":"Strip-unit design — menu_strip","title":"Strip-unit design — menu_strip","text":"Strip-unit design","code":""},{"path":"https://edibble.emitanaka.org/reference/menu_strip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strip-unit design — menu_strip","text":"","code":"menu_strip(   t1 = random_integer_small(),   t2 = random_integer_small(),   r = random_integer_small(),   seed = random_seed_number() )"},{"path":"https://edibble.emitanaka.org/reference/menu_strip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strip-unit design — menu_strip","text":"t1 number treatment levels main plots. t2 number treatment levels subplots. r number replications treatment level. seed scalar value computational reproducibility.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/menu_youden.html","id":null,"dir":"Reference","previous_headings":"","what":"Youden square design — menu_youden","title":"Youden square design — menu_youden","text":"Youden square design","code":""},{"path":"https://edibble.emitanaka.org/reference/menu_youden.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Youden square design — menu_youden","text":"","code":"menu_youden(   nc = random_integer_small(),   t = random_integer_small(min = nc + 1),   seed = random_seed_number() )"},{"path":"https://edibble.emitanaka.org/reference/menu_youden.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Youden square design — menu_youden","text":"t number treatments. seed scalar value computational reproducibility.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/ndigits.html","id":null,"dir":"Reference","previous_headings":"","what":"Find how many digits — ndigits","title":"Find how many digits — ndigits","text":"Find many digits","code":""},{"path":"https://edibble.emitanaka.org/reference/ndigits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find how many digits — ndigits","text":"","code":"ndigits(x)"},{"path":"https://edibble.emitanaka.org/reference/nested_in.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify the nesting structure for units — nested_in","title":"Specify the nesting structure for units — nested_in","text":"Specify nesting structure units","code":""},{"path":"https://edibble.emitanaka.org/reference/nested_in.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify the nesting structure for units — nested_in","text":"","code":"nested_in(   x,   ...,   prefix = \"\",   suffix = \"\",   leading0 = FALSE,   sep = edibble_labels_opt(\"sep\"),   attrs = NULL )"},{"path":"https://edibble.emitanaka.org/reference/nested_in.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify the nesting structure for units — nested_in","text":"x name parent unit nest . ... single number sequence two-sided formula left-hand side corresponds name level (level number) x right-hand side integer specifying number levels nested corresponding levels. prefix prefix label. suffix suffix label. leading0 Whether leading 0 labels made. sep separator added prefix number prefix empty. attrs named vector names values correspond attribute names values variable, data frame.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/nesting_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the nesting structure for the units — nesting_structure","title":"Get the nesting structure for the units — nesting_structure","text":"Get nesting structure units","code":""},{"path":"https://edibble.emitanaka.org/reference/nesting_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the nesting structure for the units — nesting_structure","text":"","code":"nesting_structure(design)"},{"path":"https://edibble.emitanaka.org/reference/nesting_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the nesting structure for the units — nesting_structure","text":"design edibble design","code":""},{"path":"https://edibble.emitanaka.org/reference/nesting_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the nesting structure for the units — nesting_structure","text":"Return named list. shows direct parent.","code":""},{"path":"https://edibble.emitanaka.org/reference/new_edibble.html","id":null,"dir":"Reference","previous_headings":"","what":"An edibble table constructor — new_edibble","title":"An edibble table constructor — new_edibble","text":"helps construct new edibble table special type tibble.","code":""},{"path":"https://edibble.emitanaka.org/reference/new_edibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An edibble table constructor — new_edibble","text":"","code":"new_edibble(.data, ..., graph = NULL, class = NULL)"},{"path":"https://edibble.emitanaka.org/reference/new_edibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An edibble table constructor — new_edibble","text":".data data frame list size. ... Passed new_tibble. graph edibble graph object. class Subclasses edibble table. default NULL.","code":""},{"path":"https://edibble.emitanaka.org/reference/new_edibble_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for an edibble variable — new_edibble_var","title":"Constructor for an edibble variable — new_edibble_var","text":"Constructor edibble variable","code":""},{"path":"https://edibble.emitanaka.org/reference/new_edibble_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for an edibble variable — new_edibble_var","text":"","code":"new_edibble_var(   labels = character(),   levels = unique(labels),   name = character(),   rep = NULL,   ...,   class = NULL )"},{"path":"https://edibble.emitanaka.org/reference/number_si_prefix.html","id":null,"dir":"Reference","previous_headings":"","what":"Numbers with SI prefix — number_si_prefix","title":"Numbers with SI prefix — number_si_prefix","text":"called SI prefix letter notation added suffix. largest prefix yotta $10^24$.","code":""},{"path":"https://edibble.emitanaka.org/reference/number_si_prefix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numbers with SI prefix — number_si_prefix","text":"","code":"number_si_prefix(x)"},{"path":"https://edibble.emitanaka.org/reference/number_si_prefix.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Numbers with SI prefix — number_si_prefix","text":"https://en.wikipedia.org/wiki/Metric_prefix","code":""},{"path":"https://edibble.emitanaka.org/reference/number_si_prefix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numbers with SI prefix — number_si_prefix","text":"x numeric vector format SI prefix","code":""},{"path":"https://edibble.emitanaka.org/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://edibble.emitanaka.org/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://edibble.emitanaka.org/reference/plot.edbl_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactive plot of the edibble design — plot.edbl_design","title":"Interactive plot of the edibble design — plot.edbl_design","text":"Interactive plot edibble design","code":""},{"path":"https://edibble.emitanaka.org/reference/plot.edbl_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactive plot of the edibble design — plot.edbl_design","text":"","code":"# S3 method for edbl_design plot(   .design,   which = c(\"factors\", \"levels\"),   width = \"100%\",   height = NULL,   seed = 1,   title = NULL,   subtitle = NULL,   footer = NULL,   background = \"transparent\",   view = c(\"show-buttons\", \"hide-buttons\", \"static\"),   ... )  # S3 method for edbl_table plot(.table, ...)"},{"path":"https://edibble.emitanaka.org/reference/plot.edbl_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactive plot of the edibble design — plot.edbl_design","text":".design edibble design. string either \"factors\" \"levels\". width, height width height plot. seed seed number plot always generated. title, subtitle, footer title, subtitle footer plot. default uses name .design object title rest empty. modify look text, can pass character string consisting valid input style value HTML object, e.g. \"font-size: 18px;font-family:serif;\" named vector name corresponds text display, e.g. c(\"Title\" = \"font-size:20px;\"). background background color plot. Default transparent. input can color name (e.g. \"white\"), HEX value (\"#FFFFFF\"), rgb/rgba format like rgba(0, 0, 0, 0). view string either \"show-buttons\" (default), \"hide-buttons\", \"static\"","code":""},{"path":"https://edibble.emitanaka.org/reference/prep_classical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly chose a design — prep_classical_","title":"Randomly chose a design — prep_classical_","text":"Randomly chose design","code":""},{"path":"https://edibble.emitanaka.org/reference/prep_classical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly chose a design — prep_classical_","text":"","code":"prep_classical_(...)"},{"path":"https://edibble.emitanaka.org/reference/print.edbl_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Print intermediate experimental design to terminal — print.edbl_design","title":"Print intermediate experimental design to terminal — print.edbl_design","text":"function prints edbl_graph object tree terminal. variables color coded (decorated) given options. ANSI coloring styling visible console terminal outputs support . print output best used interactively since text styling lost text R Markdown output. details can found vignette(\"edbl-output\", package = \"edibble\").","code":""},{"path":"https://edibble.emitanaka.org/reference/print.edbl_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print intermediate experimental design to terminal — print.edbl_design","text":"","code":"# S3 method for edbl_design print(   x,   decorate_units = edibble_decorate(\"units\"),   decorate_trts = edibble_decorate(\"trts\"),   decorate_rcrds = edibble_decorate(\"rcrds\"),   decorate_levels = edibble_decorate(\"levels\"),   decorate_title = edibble_decorate(\"title\"),   title = NULL,   ... )"},{"path":"https://edibble.emitanaka.org/reference/print.edbl_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print intermediate experimental design to terminal — print.edbl_design","text":"x edibble graph. decorate_trts, decorate_units, decorate_resp, decorate_levels, decorate_title function applied name treatment, unit, response factors design title. function return string. often wraps name ANSI colored text. Run edibble_opt() see list default values options. title title design. ... Unused.","code":""},{"path":"https://edibble.emitanaka.org/reference/print.edbl_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print intermediate experimental design to terminal — print.edbl_design","text":"","code":"# stylizing are only visible in terminal output that supports it print(nclassics$split) #> Error in print(nclassics$split): object 'nclassics' not found ## Split plot design ## ├─mainplot (4 levels) ## │ └─subplot (8 levels) ## ├─subplot (8 levels) ## ├─variety (2 levels) ## └─irrigation (2 levels)"},{"path":"https://edibble.emitanaka.org/reference/record_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Record the coding step — record_step","title":"Record the coding step — record_step","text":"Call function functions modify edibble design table step tracked. output functions using record_step() returning edibble design table.","code":""},{"path":"https://edibble.emitanaka.org/reference/record_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Record the coding step — record_step","text":"","code":"record_step()"},{"path":"https://edibble.emitanaka.org/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. vctrs vec_math","code":""},{"path":"https://edibble.emitanaka.org/reference/scan_menu.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the short names of the named designs — scan_menu","title":"Find the short names of the named designs — scan_menu","text":"Find short names named designs","code":""},{"path":"https://edibble.emitanaka.org/reference/scan_menu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the short names of the named designs — scan_menu","text":"","code":"scan_menu(pkgs = NULL)"},{"path":"https://edibble.emitanaka.org/reference/scan_menu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the short names of the named designs — scan_menu","text":"pkgs character vector containing package names search named designs . default search edibble packages loaded.","code":""},{"path":"https://edibble.emitanaka.org/reference/serve_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Serve edibble table — serve_table","title":"Serve edibble table — serve_table","text":"converts edibble graph object data frame called edibble. function used design final form (close final form). table can formed variables can reconciled, otherwise data frame zero rows.","code":""},{"path":"https://edibble.emitanaka.org/reference/serve_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serve edibble table — serve_table","text":"","code":"serve_table(.design, use_labels = FALSE, ..., .record = TRUE)"},{"path":"https://edibble.emitanaka.org/reference/serve_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serve edibble table — serve_table","text":"use_labels show labels instead names. ... Strings contexts notes experiment. context maybe named. context wrong, consider writing context external file write reference file context instead. Input strings support inline markup use glue braces well cli markup formatter. formatting evaluated stored edbl_design. .record logical value. indicates whether record code step. default TRUE. remain TRUE unless function used wrapper code.","code":""},{"path":"https://edibble.emitanaka.org/reference/serve_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Serve edibble table — serve_table","text":"edbl data frame columns defined vertices rows displayed vertices connected reconcile output.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/set_rcrds.html","id":null,"dir":"Reference","previous_headings":"","what":"Set records for given unit — set_rcrds","title":"Set records for given unit — set_rcrds","text":"function creates new nodes edibble graph name corresponding either intended response measured variable recorded.","code":""},{"path":"https://edibble.emitanaka.org/reference/set_rcrds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set records for given unit — set_rcrds","text":"","code":"set_rcrds(   .edibble,   ...,   .name_repair = c(\"check_unique\", \"unique\", \"universal\", \"minimal\") )  set_rcrds_of(.edibble, ...)"},{"path":"https://edibble.emitanaka.org/reference/set_rcrds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set records for given unit — set_rcrds","text":".edibble edibble design (edbl_design), edibble data frame (edbl_table) object contains edibble data frame attribute design. ... Name-value pair. value correspond single name unit defined set_units. name name record variable.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/set_trts.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the treatment variables — set_trts","title":"Set the treatment variables — set_trts","text":"function add special class, called edbl_trt, edibble variables.","code":""},{"path":"https://edibble.emitanaka.org/reference/set_trts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the treatment variables — set_trts","text":"","code":"set_trts(   .design,   ...,   .name_repair = c(\"check_unique\", \"unique\", \"universal\", \"minimal\"),   .record = TRUE )"},{"path":"https://edibble.emitanaka.org/reference/set_trts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the treatment variables — set_trts","text":"... Either name-value pair series names. .name_repair argument tibble::tibble(). .record logical value. indicates whether record code step. default TRUE. remain TRUE unless function used wrapper code.","code":""},{"path":"https://edibble.emitanaka.org/reference/set_trts.html","id":"definition-of-treatment","dir":"Reference","previous_headings":"","what":"Definition of treatment","title":"Set the treatment variables — set_trts","text":"word treatment sometimes used refer one variables. one treatment variables unfortunately confuses whether treatment refers variable combination treatment variables. Treatment whole description applied experiment.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/set_trts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the treatment variables — set_trts","text":"","code":"start_design() %>%   set_trts(pesticide = c(\"A\", \"B\", \"C\"),            dosage = c(0, 10, 20, 30, 40)) #> An edibble design #> ├─pesticide (3 levels) #> └─dosage (5 levels)"},{"path":"https://edibble.emitanaka.org/reference/set_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Set units used in experiment — set_units","title":"Set units used in experiment — set_units","text":"function sets new edibble variables class edbl_unit. specifically, means new nodes added edbl_graph.","code":""},{"path":"https://edibble.emitanaka.org/reference/set_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set units used in experiment — set_units","text":"","code":"set_units(   .design,   ...,   .name_repair = c(\"check_unique\", \"unique\", \"universal\", \"minimal\"),   .record = TRUE )"},{"path":"https://edibble.emitanaka.org/reference/set_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set units used in experiment — set_units","text":"... Either name-value pair series names. .name_repair argument tibble::tibble(). .record logical value. indicates whether record code step. default TRUE. remain TRUE unless function used wrapper code.","code":""},{"path":"https://edibble.emitanaka.org/reference/set_units.html","id":"definition-of-unit","dir":"Reference","previous_headings":"","what":"Definition of unit","title":"Set units used in experiment — set_units","text":"unit, much like factor, -used word due lack better word, edibble uses word \"unit\" refer entity, physical otherwise, pertain experiment. function doen't explicitly distinguish experimental observational units, unit limited type units. unit edibble can blocking factor even discrete time unit.","code":""},{"path":"https://edibble.emitanaka.org/reference/set_units.html","id":"limitations","dir":"Reference","previous_headings":"","what":"Limitations","title":"Set units used in experiment — set_units","text":"Currently unit discrete set levels need know number levels prior setting units.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/set_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set units used in experiment — set_units","text":"","code":"# 30 rats start_design() %>%   set_units(rat = 30) %>%   serve_table() #> # An edibble: 30 x 1 #>           rat #>    <unit(30)> #>  1      rat1  #>  2      rat2  #>  3      rat3  #>  4      rat4  #>  5      rat5  #>  6      rat6  #>  7      rat7  #>  8      rat8  #>  9      rat9  #> 10      rat10 #> # … with 20 more rows  # 4 girls named \"Anna\", \"Betty\", \"Carol\", \"Diana\" start_design() %>%   set_units(girl = c(\"Anna\", \"Betty\", \"Carol\", \"Diana\")) %>%   serve_table() #> # An edibble: 4 x 1 #>        girl #>   <unit(4)> #> 1     Anna  #> 2     Betty #> 3     Carol #> 4     Diana  # 3 companies, with 10 boxes each start_design() %>%   set_units(company = c(\"A\", \"B\", \"C\"),                 box = nested_in(company, 10)) #> An edibble design #> └─company (3 levels) #>   └─box (30 levels)  # 2 classes, one with 10 students, the other with 20 students start_design() %>%   set_units(class = 2,             student = nested_in(class,                                 1 ~ 10,                                 2 ~ 20)) #> An edibble design #> └─class (2 levels) #>   └─student (30 levels)  # 4 countries with 10 people from Australia & New Zealand and 20 from the rest start_design() %>%   set_units(country = c(\"AU\", \"NZ\", \"USA\", \"JPN\"),             person = nested_in(country,                                c(\"AU\", \"NZ\") ~ 10,                                            . ~ 20)) %>%   serve_table() #> # An edibble: 60 x 2 #>      country     person #>    <unit(4)> <unit(60)> #>  1        AU   person1  #>  2        AU   person2  #>  3        AU   person3  #>  4        AU   person4  #>  5        AU   person5  #>  6        AU   person6  #>  7        AU   person7  #>  8        AU   person8  #>  9        AU   person9  #> 10        AU   person10 #> # … with 50 more rows"},{"path":"https://edibble.emitanaka.org/reference/set_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Set edibble variables — set_vars","title":"Set edibble variables — set_vars","text":"Adds variable level nodes edibble graph.","code":""},{"path":"https://edibble.emitanaka.org/reference/set_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set edibble variables — set_vars","text":"","code":"set_vars(   .edibble,   ...,   .class = NULL,   .name_repair = c(\"check_unique\", \"unique\", \"universal\", \"minimal\"),   .code = NULL )"},{"path":"https://edibble.emitanaka.org/reference/set_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set edibble variables — set_vars","text":"... Either name-value pair series names. .class class variables. .name_repair argument tibble::tibble().","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/simulate_rcrds.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate records — simulate_rcrds","title":"Simulate records — simulate_rcrds","text":"Simulate records","code":""},{"path":"https://edibble.emitanaka.org/reference/simulate_rcrds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate records — simulate_rcrds","text":"","code":"simulate_rcrds(.data, ..., .censor = NA, .seed = NULL)"},{"path":"https://edibble.emitanaka.org/reference/simulate_rcrds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate records — simulate_rcrds","text":".data edibble table data frame ... name-value pair. .censor value replace value lie within valid values. .seed optional seed value.","code":""},{"path":"https://edibble.emitanaka.org/reference/skittles.html","id":null,"dir":"Reference","previous_headings":"","what":"Skittles experiment — skittles","title":"Skittles experiment — skittles","text":"contains data skittle experiment conducted Nick Tierney. goal experiment assess people can discern flavour skittle (indicated color skittle) based taste alone. participants blindfolded. experiment 3 participants participant tasting 10 skittles, 2 5 color, random order. skittle_type type skittle. Coincides real_skittle. person participant. order order skittle tasted. choice participant's choice. real_skittle actual skittle color.","code":""},{"path":"https://edibble.emitanaka.org/reference/skittles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skittles experiment — skittles","text":"","code":"skittles"},{"path":"https://edibble.emitanaka.org/reference/skittles.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Skittles experiment — skittles","text":"object class spec_tbl_df (inherits tbl_df, tbl, data.frame) 30 rows 6 columns.","code":""},{"path":"https://edibble.emitanaka.org/reference/skittles.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Skittles experiment — skittles","text":"https://github.com/njtierney/skittles","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/start_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Start the edibble design — start_design","title":"Start the edibble design — start_design","text":"function really much besides create new edibble design object.","code":""},{"path":"https://edibble.emitanaka.org/reference/start_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start the edibble design — start_design","text":"","code":"start_design(name = NULL, .record = TRUE, seed = NULL)"},{"path":"https://edibble.emitanaka.org/reference/start_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start the edibble design — start_design","text":"name Optional name used title printing design. .record logical value. indicates whether record code step. default TRUE. remain TRUE unless function used wrapper code.","code":""},{"path":"https://edibble.emitanaka.org/reference/start_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start the edibble design — start_design","text":"empty edbl_design object.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/start_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start the edibble design — start_design","text":"","code":"start_design(\"My design\") #> My design"},{"path":"https://edibble.emitanaka.org/reference/takeout.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a named experimental design — takeout","title":"Create a named experimental design — takeout","text":"function generates named experimental design supplying selected menu named design prints default can find available recipes scan_menu().","code":""},{"path":"https://edibble.emitanaka.org/reference/takeout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a named experimental design — takeout","text":"","code":"takeout(recipe = NULL, show = TRUE)"},{"path":"https://edibble.emitanaka.org/reference/takeout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a named experimental design — takeout","text":"recipe named design object. typically generated function prefix menu_. nothing supplied, randomly select one. show logical value indicate whether code shown . Default TRUE.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/takeout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a named experimental design — takeout","text":"","code":"takeout(menu_crd(n = 50, t = 5)) #> start_design(\"Completely Randomised Design\") %>% #>   set_units(unit = 50) %>% #>   set_trts(trt = 5) %>% #>   allot_trts(trt ~ unit) %>% #>   assign_trts(\"random\", seed = 382) %>% #>   serve_table()  #>  #> # Completely Randomised Design  #> # An edibble: 50 x 2 #>          unit      trt #>  * <unit(50)> <trt(5)> #>  1     unit1      trt5 #>  2     unit2      trt5 #>  3     unit3      trt3 #>  4     unit4      trt2 #>  5     unit5      trt5 #>  6     unit6      trt5 #>  7     unit7      trt1 #>  8     unit8      trt5 #>  9     unit9      trt3 #> 10     unit10     trt4 #> # … with 40 more rows # if you omit the design parameters then it will use the default # (which may be random) takeout(menu_crd()) #> start_design(\"Completely Randomised Design\") %>% #>   set_units(unit = 25) %>% #>   set_trts(trt = 7) %>% #>   allot_trts(trt ~ unit) %>% #>   assign_trts(\"random\", seed = 587) %>% #>   serve_table()  #>  #> # Completely Randomised Design  #> # An edibble: 25 x 2 #>          unit      trt #>  * <unit(25)> <trt(7)> #>  1     unit1      trt4 #>  2     unit2      trt1 #>  3     unit3      trt1 #>  4     unit4      trt6 #>  5     unit5      trt5 #>  6     unit6      trt2 #>  7     unit7      trt1 #>  8     unit8      trt7 #>  9     unit9      trt5 #> 10     unit10     trt2 #> # … with 15 more rows # if you don't give any short names then it will generate a random one takeout() #> → No name was supplied so selecting a random named experimental design... #> → Selected Hyper-Graeco-Latin Square Design #> start_design(\"Hyper-Graeco-Latin Square Design\") %>% #>   set_units(block1 = 8, #>             block2 = 8, #>             block3 = 8, #>             block4 = 8, #>             unit = crossed_by(block1, block2, block3, block4)) %>% #>   set_trts(trt = 8) %>% #>   allot_trts(trt ~ unit) %>% #>   assign_trts(\"random\", seed = 429) %>% #>   serve_table()  #>  #> # Hyper-Graeco-Latin Square Design  #> # An edibble: 4,096 x 6 #>       block1    block2    block3    block4       unit      trt #>  * <unit(8)> <unit(8)> <unit(8)> <unit(8)> <unit(4k)> <trt(8)> #>  1   block11   block21   block31   block41     unit1      trt8 #>  2   block12   block21   block31   block41     unit2      trt3 #>  3   block13   block21   block31   block41     unit3      trt5 #>  4   block14   block21   block31   block41     unit4      trt1 #>  5   block15   block21   block31   block41     unit5      trt2 #>  6   block16   block21   block31   block41     unit6      trt4 #>  7   block17   block21   block31   block41     unit7      trt6 #>  8   block18   block21   block31   block41     unit8      trt7 #>  9   block11   block22   block31   block41     unit9      trt6 #> 10   block12   block22   block31   block41     unit10     trt7 #> # … with 4,086 more rows"},{"path":"https://edibble.emitanaka.org/reference/utility-edibble-var.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility functions for edibble variable — utility-edibble-var","title":"Utility functions for edibble variable — utility-edibble-var","text":"S3 methods edbl_var objects expected output factor. functions utility functions related edbl_var object.","code":""},{"path":"https://edibble.emitanaka.org/reference/utility-edibble-var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility functions for edibble variable — utility-edibble-var","text":"","code":"# S3 method for edbl_var as.character(x, ...)  # S3 method for edbl_var as.integer(x, ...)  is_edibble_var(x)  is_edibble_unit(x)  is_edibble_trt(x)  is_edibble_rcrd(x)"},{"path":"https://edibble.emitanaka.org/reference/utility-edibble-var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility functions for edibble variable — utility-edibble-var","text":"x edbl_var object. ... Ignored.","code":""},{"path":"https://edibble.emitanaka.org/reference/var_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the design contains a particular variable. — var_exists","title":"Check if the design contains a particular variable. — var_exists","text":"Check design contains particular variable.","code":""},{"path":"https://edibble.emitanaka.org/reference/var_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the design contains a particular variable. — var_exists","text":"","code":"var_exists(design, name = NULL)"},{"path":"https://edibble.emitanaka.org/reference/var_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the design contains a particular variable. — var_exists","text":"design edibble design. name character vector variable names.","code":""},{"path":"https://edibble.emitanaka.org/reference/var_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the design contains a particular variable. — var_exists","text":"logical vector size name single logical value class provied.","code":""},{"path":"https://edibble.emitanaka.org/reference/var_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the vertex IDs of the edibble design — var_ids","title":"Get the vertex IDs of the edibble design — var_ids","text":"Set operators get vertex/node IDs edbl_design object.","code":""},{"path":"https://edibble.emitanaka.org/reference/var_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the vertex IDs of the edibble design — var_ids","text":"","code":"var_ids(design, type = c(\"fct\", \"lvl\"), vclass = NULL)  trt_ids(design, type = \"fct\")  unit_ids(design, type = \"fct\")  rcrd_ids(design, type = \"fct\")  fct_id(design, name = NULL)  lvl_id(design, name = NULL)  fct_child(design, id = NULL)  lvl_child(design, id = NULL)  fct_parent(design, id = NULL)  lvl_parent(design, id = NULL)  fct_ancestor(design, id = NULL)  fct_leaves(design)  fct_obs_unit(design, initial = NULL)  lvl_ancestor(design, id = NULL)"},{"path":"https://edibble.emitanaka.org/reference/var_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the vertex IDs of the edibble design — var_ids","text":"design edibble design. type string value either \"fct\" \"lvl\". Use \"fct\" factor graph \"lvl\" level graph. vclass class vertex/node.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/var_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the node labels of the edibble design — var_names","title":"Get the node labels of the edibble design — var_names","text":"Get node labels edibble design","code":""},{"path":"https://edibble.emitanaka.org/reference/var_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the node labels of the edibble design — var_names","text":"","code":"var_names(design, vclass = NULL)  trt_names(design)  unit_names(design)  rcrd_names(design)  fct_names(design, id = NULL)  lvl_names(design, id = NULL)  fct_levels(design, id = NULL, name = NULL)"},{"path":"https://edibble.emitanaka.org/reference/var_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the node labels of the edibble design — var_names","text":"design edibble design. vclass class vertex/node.","code":""},{"path":[]},{"path":"https://edibble.emitanaka.org/reference/with_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Validation values — with_value","title":"Validation values — with_value","text":"creates list used later creating data validation rules data exported.","code":""},{"path":"https://edibble.emitanaka.org/reference/with_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validation values — with_value","text":"","code":"with_value(   operator = c(\"=\", \"==\", \">=\", \"<=\", \"<\", \">\", \"!=\"),   value = NULL,   between = NULL,   not_between = NULL )"},{"path":"https://edibble.emitanaka.org/reference/with_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validation values — with_value","text":"operator Operator apply. value optional value related operator , not_between optional numerical vector size two first entry minimum value second entry maximum value. , value valid within range minimum maximum value inclusive. not_between, value must lie outside values.","code":""},{"path":"https://edibble.emitanaka.org/reference/with_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validation values — with_value","text":"list two elements operator value.","code":""},{"path":"https://edibble.emitanaka.org/news/index.html","id":"edibble-development-version","dir":"Changelog","previous_headings":"","what":"edibble (development version)","title":"edibble (development version)","text":"Initial release package","code":""}]
